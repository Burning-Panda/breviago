// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sql

import (
	"context"
	"database/sql"
)

const createAcronym = `-- name: CreateAcronym :one
INSERT INTO
    acronyms (uuid, short_form, long_form, description)
VALUES
    (?, ?, ?, ?) RETURNING id,
    uuid,
    short_form,
    long_form,
    description,
    created_at,
    updated_at
`

type CreateAcronymParams struct {
	Uuid        string
	ShortForm   string
	LongForm    string
	Description sql.NullString
}

func (q *Queries) CreateAcronym(ctx context.Context, arg CreateAcronymParams) (Acronym, error) {
	row := q.db.QueryRowContext(ctx, createAcronym,
		arg.Uuid,
		arg.ShortForm,
		arg.LongForm,
		arg.Description,
	)
	var i Acronym
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ShortForm,
		&i.LongForm,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAcronym = `-- name: GetAcronym :one
SELECT
    id,
    uuid,
    short_form,
    long_form,
    description,
    created_at,
    updated_at
FROM
    acronyms
WHERE
    id = ?
`

func (q *Queries) GetAcronym(ctx context.Context, id int64) (Acronym, error) {
	row := q.db.QueryRowContext(ctx, getAcronym, id)
	var i Acronym
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ShortForm,
		&i.LongForm,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAcronyms = `-- name: GetAllAcronyms :many
SELECT
    id,
    uuid,
    short_form,
    long_form,
    description,
    created_at,
    updated_at
FROM
    acronyms
`

func (q *Queries) GetAllAcronyms(ctx context.Context) ([]Acronym, error) {
	rows, err := q.db.QueryContext(ctx, getAllAcronyms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Acronym
	for rows.Next() {
		var i Acronym
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.ShortForm,
			&i.LongForm,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAcronyms = `-- name: SearchAcronyms :many
SELECT
    id,
    uuid,
    short_form,
    long_form,
    description,
    created_at,
    updated_at
FROM
    acronyms
WHERE
    short_form LIKE ?
    OR long_form LIKE ?
`

type SearchAcronymsParams struct {
	ShortForm string
	LongForm  string
}

func (q *Queries) SearchAcronyms(ctx context.Context, arg SearchAcronymsParams) ([]Acronym, error) {
	rows, err := q.db.QueryContext(ctx, searchAcronyms, arg.ShortForm, arg.LongForm)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Acronym
	for rows.Next() {
		var i Acronym
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.ShortForm,
			&i.LongForm,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAcronym = `-- name: UpdateAcronym :one
UPDATE acronyms
SET
    short_form = ?,
    long_form = ?,
    description = ?
WHERE
    id = ? RETURNING id,
    uuid,
    short_form,
    long_form,
    description,
    created_at,
    updated_at
`

type UpdateAcronymParams struct {
	ShortForm   string
	LongForm    string
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateAcronym(ctx context.Context, arg UpdateAcronymParams) (Acronym, error) {
	row := q.db.QueryRowContext(ctx, updateAcronym,
		arg.ShortForm,
		arg.LongForm,
		arg.Description,
		arg.ID,
	)
	var i Acronym
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.ShortForm,
		&i.LongForm,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
